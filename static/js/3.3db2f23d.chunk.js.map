{"version":3,"sources":["hoc/withAuthRedirect.tsx","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","module","exports","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","ProfileStatus","memo","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","onBlur","updateStatus","autoFocus","ProfileInfo","profile","isOwner","className","styles","descrBlock","fullName","userPhoto","photos","large","src","alt","type","aboutMe","Preloader","Post","style","item","photo","message","likesCount","maxLength10","maxLengthCreator","AddNewPostFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","name","component","Textarea","validate","required","MyPosts","postsElements","posts","map","p","id","key","postsBlock","values","addPost","newPostText","profilePage","dispatch","Profile","MyPostsContainer","ProfileContainer","userId","match","params","authorizedUserId","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","compose","withRouter"],"mappings":"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","file":"static/js/3.3db2f23d.chunk.js","sourcesContent":["import React from 'react'\r\nimport {Redirect} from \"react-router-dom\"\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport const withAuthRedirect = (Component: any) => {\r\n    class RedirectComponent extends React.Component<any, any> {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to={'/login'}/>\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n\r\n    return connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descrBlock\":\"ProfileInfo_descrBlock__ZcaEX\",\"userPhoto\":\"ProfileInfo_userPhoto__2YJJW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__268xc\",\"posts\":\"MyPosts_posts__2dTAM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__28apu\"};","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React, {ChangeEvent, useEffect, useState} from 'react'\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatus = React.memo((props: ProfileStatusPropsType) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [status, setStatus] = useState<string>(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n        return (\r\n            <div>\r\n                {!editMode &&\r\n                    <div>\r\n                        <span onDoubleClick={activateEditMode}>{props.status || '-----'}</span>\r\n                    </div>\r\n                }\r\n                {editMode &&\r\n                    <div>\r\n                        <input onChange={onStatusChange}\r\n                               onBlur={deactivateEditMode}\r\n                               autoFocus\r\n                               value={status}/>\r\n                    </div>\r\n                }\r\n            </div>\r\n        )\r\n})\r\n\r\nexport default ProfileStatus","import React from \"react\"\r\nimport styles from \"./ProfileInfo.module.css\"\r\nimport Preloader from \"../../Common/Preloader/Preloader\"\r\nimport userPhoto from './../../../assets/image/user-photo.png'\r\nimport ProfileStatus from \"./ProfileStatus\";\r\n\r\n\r\n\r\ntype ProfileInfoProps = {\r\n    profile: any\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n}\r\n\r\nfunction ProfileInfo({profile, status, updateStatus, isOwner}: ProfileInfoProps) {\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <div>\r\n            <div className={styles.descrBlock}>\r\n                <div>{profile.fullName}</div>\r\n                <div className={styles.userPhoto}>\r\n                    {profile.photos.large ? <img src={profile.photos.large} alt={'ProfilePhoto'}/> : <img src={userPhoto} alt={'ProfilePhoto'}/>}\r\n                </div>\r\n\r\n                {isOwner && <div><input type={'file'}/> Change Photo</div>}\r\n                <div>{profile.aboutMe}</div>\r\n                <ProfileStatus status={status} updateStatus={updateStatus}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","import React from \"react\";\r\nimport style from \"./Post.module.css\"\r\nimport photo from \"../../../../assets/image/user-photo.png\"\r\nimport {PostType} from \"../../../../redux/profile-reducer\";\r\n\r\n\r\n\r\n\r\nfunction Post(props: PostType) {\r\n    return (\r\n        <div className={style.item}>\r\n            <img src={photo} alt=\"\"/>\r\n            {props.message}\r\n            <div>\r\n                <span>like</span>{props.likesCount}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Post;","import React from \"react\";\r\nimport style from \"./MyPosts.module.css\"\r\nimport Post from \"./Post/Post\";\r\nimport {PostType} from \"../../../redux/profile-reducer\";\r\nimport {InjectedFormProps, Field, reduxForm } from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../Common/FormsControls/FormsControls\";\r\n\r\ntype MyPostsType = {\r\n    posts: Array<PostType>\r\n    addPost: (values: string) => void\r\n}\r\n\r\ntype AddNewPostFormType = {\r\n    newPostText: any //?????????????????????????????????????\r\n}\r\n\r\nfunction MyPosts(props: MyPostsType) {\r\n    let postsElements = props.posts.map(p => <Post message={p.message} likesCount={p.likesCount}\r\n    id={p.id} key={p.id}/>);\r\n\r\n    const onAddPost = (values: AddNewPostFormType) => {\r\n        props.addPost(values.newPostText);\r\n    }\r\n    return (\r\n            <div className={style.postsBlock}>\r\n                <h3>My posts</h3>\r\n                <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n                <div className={style.posts}>\r\n                    {postsElements}\r\n                </div>\r\n            </div>\r\n    )\r\n}\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nconst AddNewPostForm: React.FC<InjectedFormProps<AddNewPostFormType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name={\"newPostText\"} component={Textarea} validate={[required, maxLength10]}/>\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddNewPostFormRedux = reduxForm<AddNewPostFormType>({form: 'ProfileAddNewPostForm'})(AddNewPostForm)\r\n\r\nexport default MyPosts;","import {addPost, PostType} from \"../../../redux/profile-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\n\r\n\r\ntype MapStatePropsType = {\r\n    posts: Array<PostType>\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        posts: state.profilePage.posts\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPost(newPostText))\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport default connect<MapStatePropsType, MapDispatchPropsType, {}, AppStateType>(mapStateToProps, mapDispatchToProps)(MyPosts);","import React from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\ntype ProfilePropsType = {\r\n    profile: any\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n}\r\n\r\nfunction Profile({profile, updateStatus, isOwner, status}: ProfilePropsType) {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={profile}\r\n                         status={status}\r\n                         updateStatus={updateStatus}\r\n                         isOwner={isOwner}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from 'react'\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {getStatus, getUserProfile, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\ntype PathParamType = {\r\n    userId: any\r\n}\r\ntype MapStatePropsType = {\r\n    profile: any\r\n    status: any\r\n    authorizedUserId: number | null\r\n    isAuth: boolean\r\n    isOwner: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType & RouteComponentProps<PathParamType>\r\n\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return <Profile profile={this.props.profile}\r\n                        status={this.props.status}\r\n                        updateStatus={this.props.updateStatus}\r\n                        isOwner={!this.props.match.params.userId}/>\r\n    }\r\n\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.userId,\r\n        isAuth: state.auth.isAuth,\r\n        isOwner: state.auth.isOwner\r\n    }\r\n}\r\n\r\n\r\nexport default compose<React.ComponentClass>(\r\n    connect<MapStatePropsType, MapDispatchPropsType, {}, AppStateType>(mapStateToProps, {\r\n        getUserProfile,\r\n        getStatus,\r\n        updateStatus\r\n    }),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)"],"sourceRoot":""}